version: "3.9"
services:
  traefik:
    image: traefik
    command:
      - --providers.docker.exposedbydefault=false
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.email=${EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    environment:
      - CF_API_EMAIL=${EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    restart: unless-stopped

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant
    volumes:
      - ${CONFIG_PATH}/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    privileged: true
    network_mode: host
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.smarthome.rule=Host(`smarthome.${LOCAL_DOMAIN}`)
      - traefik.http.routers.smarthome.tls.certresolver=myresolver
      - traefik.http.services.smarthome.loadbalancer.server.port=8123

  tailscale:
    image: tailscale/tailscale
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TS_AUTHKEY=${TAIL_SCALE_AUTH_KEY}
      - TS_ROUTES=192.168.1.0/24
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_EXTRA_ARGS=--advertise-exit-node
    volumes:
      - ${CONFIG_PATH}/tailscale:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun

  vpn:
    image: ghcr.io/bubuntux/nordlynx
    cap_add:
      - NET_ADMIN #required
    environment:
      - PRIVATE_KEY=${NORD_VPN_PRIVATE_KEY}
      - NET_LOCAL=192.168.1.0/24
    restart: unless-stopped
    ports:
      - 8191:8191 # flareSolverr
      - 8989:8989 # sonarr
      - 7878:7878 # radarr
      - 9696:9696 # prowlarr
      - 9091:9091 # transmission
      - 51413:51413 # also transmission?
      - 51413:51413/udp
    labels:
      - traefik.enable=true

      - traefik.http.routers.sonarr.rule=Host(`sonarr.${LOCAL_DOMAIN}`)
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

      - traefik.http.routers.radarr.rule=Host(`radarr.${LOCAL_DOMAIN}`)
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878

      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${LOCAL_DOMAIN}`)
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696

      - traefik.http.routers.transmission.rule=Host(`transmission.${LOCAL_DOMAIN}`)
      - traefik.http.routers.transmission.service=transmission
      - traefik.http.routers.transmission.tls.certresolver=myresolver
      - traefik.http.services.transmission.loadbalancer.server.port=9091

  transmission:
    image: ghcr.io/linuxserver/transmission
    network_mode: service:vpn
    depends_on:
      - vpn
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      # - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
      # - USER=username #optional
      # - PASS=password #optional
      # - WHITELIST=iplist #optional
      # - HOST_WHITELIST=dnsnane list #optional
    volumes:
      - ${CONFIG_PATH}/transmission:/config
      - downloads:/downloads
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    network_mode: service:vpn
    depends_on:
      - vpn
    environment:
      - TZ=America/Los_Angeles
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    network_mode: service:vpn
    depends_on:
      - vpn
      - flaresolverr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
    - ${CONFIG_PATH}/prowlarr:/config
    restart: unless-stopped

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
      - prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - ${CONFIG_PATH}/sonarr:/config
      - tv_shows:/tv #optional
      - downloads:/downloads #optional
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr
    network_mode: service:vpn
    depends_on:
      - vpn
      - transmission
      - prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - ${CONFIG_PATH}/radarr:/config
      - movies:/movies #optional
      - downloads:/downloads #optional
    restart: unless-stopped

  miniflux:
    image: miniflux/miniflux
    restart: unless-stopped
    ports:
      - 8888:8080
    depends_on:
      minifluxdb:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://miniflux:secret@minifluxdb/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_USER}
      - ADMIN_PASSWORD=${MINIFLUX_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.reader.rule=Host(`reader.${LOCAL_DOMAIN}`)
      - traefik.http.routers.reader.tls.certresolver=myresolver

  minifluxdb:
    image: postgres:14
    restart: unless-stopped
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=secret
    volumes:
      - ${CONFIG_PATH}/miniflux/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s

  adguardhome:
    image: adguard/adguardhome
    ports:
      - 53:53/tcp
      - ${LOCAL_IP}:53:53/udp # https://discourse.pi-hole.net/t/solve-dns-resolution-in-other-containers-when-using-docker-pihole/31413
      - 80/tcp
    volumes:
      - ${CONFIG_PATH}/adguard/work:/opt/adguardhome/work
      - ${CONFIG_PATH}/adguard/config:/opt/adguardhome/conf
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguardhome.rule=Host(`adguardhome.${LOCAL_DOMAIN}`)
      - traefik.http.routers.adguardhome.tls.certresolver=myresolver
      - traefik.http.services.adguardhome.loadbalancer.server.port=80

  plex:
    image: lscr.io/linuxserver/plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - VERSION=docker
    volumes:
      - ${CONFIG_PATH}/plex:/config
      - tv_shows:/tv #optional
      - movies:/movies #optional
    devices:
       - /dev/dri:/dev/dri # For H/W transcoding
    restart: unless-stopped

  komga:
    image: gotson/komga
    volumes:
      - ${CONFIG_PATH}/komga/config:/config
      - books:/data #optional
    ports:
      - 25600:25600
    user: "1000:1000"
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.komga.rule=Host(`komga.${LOCAL_DOMAIN}`)
      - traefik.http.routers.komga.tls.certresolver=myresolver

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    environment:
      - WATCHTOWER_NOTIFICATION_URL=discord://${DISCORD_TOKEN}@${DISCORD_WEB_HOOK_ID}?Username=Watchtower
      - WATCHTOWER_SCHEDULE=0 30 2 * * *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - TZ=America/Los_Angeles

  cloudflared:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN}

  uptime-kuma:
    image: louislam/uptime-kuma
    expose:
      - 3001
    volumes:
      - ${CONFIG_PATH}/kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime.rule=Host(`uptime.${LOCAL_DOMAIN}`)
      - traefik.http.routers.uptime.tls.certresolver=myresolver

  portainer:
    image: portainer/portainer-ce
    ports:
      - 9000:9000
    volumes:
      - ${CONFIG_PATH}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${LOCAL_DOMAIN}`)
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000

  glances:
    image: nicolargo/glances
    pid: host
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - "GLANCES_OPT=-w"
      - TZ=America/Los_Angeles
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`glances.${LOCAL_DOMAIN}`)
      - traefik.http.routers.glances.tls.certresolver=myresolver
      - traefik.http.services.glances.loadbalancer.server.port=61208

  smokeping:
    image: lscr.io/linuxserver/smokeping:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - ${CONFIG_PATH}/smokeping/config:/config
      - ${CONFIG_PATH}/smokeping/data:/data
    expose:
      - 80
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.smokeping.rule=Host(`smokeping.${LOCAL_DOMAIN}`)
      - traefik.http.routers.smokeping.tls.certresolver=myresolver

  homarr:
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${CONFIG_PATH}/homarr/configs:/app/data/configs
      - ${CONFIG_PATH}/homarr/icons:/app/public/icons
      - ${CONFIG_PATH}/homarr/data:/data
    expose:
      - 7575
    labels:
      - traefik.enable=true
      - traefik.http.routers.homarr.rule=Host(`homarr.${LOCAL_DOMAIN}`)
      - traefik.http.routers.homarr.tls.certresolver=myresolver

volumes:
  tv_shows:
    driver_opts:
      type: nfs
      o: ${NFS_ADDRESS}
      device: ${NFS_TV_SHOWS_PATH}

  movies:
    driver_opts:
      type: nfs
      o: ${NFS_ADDRESS}
      device: ${NFS_MOVIES_PATH}

  books:
    driver_opts:
      type: nfs
      o: ${NFS_ADDRESS}
      device: ${NFS_BOOKS_PATH}

  downloads:
    driver_opts:
      type: nfs
      o: ${NFS_ADDRESS}
      device: ${NFS_DOWNLOADS_PATH}

  traefik_letsencrypt:
